# Copyright 2010-2021, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

load(
    "//:build_defs.bzl",
    "mozc_cc_binary",
    "mozc_cc_library",
    "mozc_cc_test",
    "mozc_py_binary",
    "mozc_py_library",
    "mozc_select",
)
load(
    "//:config.bzl",
    "LINUX_MOZC_BROWSER_COMMAND",
    "LINUX_MOZC_DOCUMENT_DIR",
    "LINUX_MOZC_SERVER_DIR",
)

package(default_visibility = [
    "//:__subpackages__",
])

# Test suite needs to have exact test names,
# because android tests are tagged "manual".
test_suite(
    name = "android_test",
    tests = [
        ":clock_mock_test_android",
        ":clock_test_android",
        ":config_file_stream_test_android",
        ":cpu_stats_test_android",
        ":encryptor_test_android",
        ":hash_test_android",
        ":logging_test_android",
        ":mmap_test_android",
        ":number_util_test_android",
        ":obfuscator_support_test_android",
        ":process_mutex_test_android",
        ":singleton_test_android",
        ":stopwatch_test_android",
        ":system_util_test_android",
        ":text_normalizer_test_android",
        ":thread_test_android",
        ":url_test_android",
        ":version_test_android",
        # Disabled tests due to errors.
        # ":embedded_file_test_android",
        # ":file_util_test_android",
        # ":multifile_test_android",
        # ":util_test_android",
    ],
)

mozc_cc_library(
    name = "compiler_specific",
    hdrs = ["compiler_specific.h"],
    visibility = [
        "//:__subpackages__",
    ],
)

mozc_cc_library(
    name = "init_mozc_buildtool",
    srcs = ["init_mozc.cc"],
    hdrs = ["init_mozc.h"],
    copts = ["-DMOZC_BUILDTOOL_BUILD"],
    visibility = ["//:__subpackages__"],
    deps = [
        ":system_util",
        "@com_google_absl//absl/flags:flag",
    ] + mozc_select(
        client = [
            ":file_util",
            ":logging",
            "@com_google_absl//absl/flags:parse",
        ],
        default = ["//base"],
        linux = ["//base"],
        macos = ["//base"],
        oss = [
            ":file_util",
            ":logging",
            "@com_google_absl//absl/flags:parse",
        ],
    ),
)

mozc_cc_library(
    name = "init_mozc",
    srcs = ["init_mozc.cc"],
    hdrs = ["init_mozc.h"],
    visibility = [
        "//:__subpackages__",
    ],
    deps = [
        "@com_google_absl//absl/flags:flag",
    ] + mozc_select(
        client = [
            ":file_util",
            ":logging",
            ":system_util",
            "@com_google_absl//absl/flags:parse",
        ],
        default = ["//base"],
        linux = ["//base"],
        macos = ["//base"],
        oss = [
            ":file_util",
            ":logging",
            ":system_util",
            "@com_google_absl//absl/flags:parse",
        ],
    ),
)

mozc_cc_library(
    name = "port",
    hdrs = ["port.h"],
    deps = mozc_select(
        default = [
            "//base:base",
            "//base:port",
        ],
        oss = ["@com_google_absl//absl/base:core_headers"],
    ),
)

mozc_cc_library(
    name = "const",
    hdrs = ["const.h"],
    visibility = [
        "//:__subpackages__",
    ],
)

mozc_cc_library(
    name = "logging",
    srcs = ["logging.cc"],
    hdrs = ["logging.h"],
    linkopts = mozc_select(
        # Android requires linking logging library.
        android = ["-llog"],
    ),
    deps = mozc_select(
        default = [
            "//base",
            "//base:logging_extensions",
        ],
        linux = [
            "//base",
            "//base:logging_extensions",
        ],
        oss = [
            ":clock",
            ":const",
            ":singleton",
            "@com_google_absl//absl/strings",
        ],
        oss_linux = [
            ":clock",
            ":const",
            ":singleton",
            "@com_google_absl//absl/strings",
        ],
        wasm = [
            ":clock",
            ":const",
            ":singleton",
            "@com_google_absl//absl/strings",
        ],
    ) + [
        ":port",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/synchronization",
    ],
)

mozc_cc_test(
    name = "logging_test",
    size = "small",
    srcs = ["logging_test.cc"],
    requires_full_emulation = False,
    deps = [
        ":logging",
        "//testing:gunit_main",
    ],
)

mozc_cc_library(
    name = "codegen_bytearray_stream",
    srcs = ["codegen_bytearray_stream.cc"],
    hdrs = ["codegen_bytearray_stream.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        ":port",
    ],
)

mozc_cc_test(
    name = "codegen_bytearray_stream_test",
    size = "small",
    srcs = ["codegen_bytearray_stream_test.cc"],
    requires_full_emulation = False,
    tags = ["noandroid"],
    visibility = ["//visibility:private"],
    deps = [
        ":codegen_bytearray_stream",
        ":port",
        "//testing:gunit_main",
    ],
)

mozc_cc_library(
    name = "thread",
    srcs = ["thread.cc"],
    hdrs = ["thread.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        ":logging",
        ":port",
    ],
)

mozc_cc_test(
    name = "thread_test",
    size = "small",
    srcs = [
        "thread_test.cc",
    ],
    requires_full_emulation = False,
    deps = [
        ":thread",
        "//testing:gunit_main",
        "@com_google_absl//absl/time",
    ],
)

mozc_cc_library(
    name = "singleton",
    srcs = ["singleton.cc"],
    hdrs = ["singleton.h"],
    visibility = ["//:__subpackages__"],
    deps = ["@com_google_absl//absl/base"],
)

mozc_cc_test(
    name = "singleton_test",
    size = "small",
    srcs = ["singleton_test.cc"],
    requires_full_emulation = False,
    deps = [
        ":singleton",
        ":thread",
        "//testing:gunit_main",
        "@com_google_absl//absl/time",
    ],
)

mozc_py_binary(
    name = "gen_character_set",
    srcs = ["gen_character_set.py"],
)

genrule(
    name = "character_set_data",
    srcs = [
        "//data/unicode:JIS0201.TXT",
        "//data/unicode:JIS0208.TXT",
    ],
    outs = ["character_set.inc"],
    cmd = (
        "$(location :gen_character_set)" +
        " --jisx0201file=$(location //data/unicode:JIS0201.TXT)" +
        " --jisx0208file=$(location //data/unicode:JIS0208.TXT)" +
        " --output=$@"
    ),
    tools = [":gen_character_set"],
    visibility = ["//visibility:private"],
)

mozc_cc_library(
    name = "double_array_def",
    hdrs = ["double_array.h"],
    deps = [
        ":port",
    ],
)

mozc_cc_library(
    name = "japanese_util_rule",
    srcs = ["japanese_util_rule.cc"],
    hdrs = ["japanese_util_rule.h"],
    visibility = ["//visibility:private"],
    deps = [":double_array_def"],
)

mozc_cc_library(
    name = "hash",
    srcs = ["hash.cc"],
    hdrs = ["hash.h"],
    deps = [
        ":port",
        "@com_google_absl//absl/strings",
    ],
)

mozc_cc_test(
    name = "hash_test",
    srcs = ["hash_test.cc"],
    requires_full_emulation = False,
    deps = [
        ":hash",
        ":port",
        "//testing:gunit_main",
    ],
)

mozc_cc_library(
    name = "clock",
    srcs = ["clock.cc"],
    hdrs = ["clock.h"],
    deps = [
        ":singleton",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/time",
    ],
)

mozc_cc_test(
    name = "clock_test",
    srcs = ["clock_test.cc"],
    requires_full_emulation = False,
    deps = [
        ":clock",
        ":clock_mock",
        "//testing:gunit_main",
    ],
)

mozc_cc_library(
    name = "japanese_util",
    srcs = [
        "japanese_util.cc",
    ],
    hdrs = ["japanese_util.h"],
    visibility = [
        "//:__subpackages__",
    ],
    deps = [
        ":double_array_def",
        ":japanese_util_rule",
        "@com_google_absl//absl/strings",
    ],
)

mozc_cc_test(
    name = "japanese_util_test",
    size = "small",
    srcs = [
        "japanese_util_test.cc",
    ],
    requires_full_emulation = False,
    deps = [
        ":japanese_util",
        "//testing:gunit_main",
    ],
)

mozc_cc_library(
    name = "util",
    srcs = [
        "util.cc",
        ":character_set_data",
    ],
    hdrs = ["util.h"],
    visibility = [
        "//:__subpackages__",
    ],
    deps = [
        ":logging",
        ":port",
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/numeric:bits",
        "@com_google_absl//absl/random",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_absl//absl/types:span",
    ],
)

mozc_cc_test(
    name = "util_test",
    size = "small",
    srcs = [
        "util_test.cc",
    ],
    requires_full_emulation = False,
    deps = [
        ":logging",
        ":port",
        ":util",
        "//testing:gunit_main",
        "@com_google_absl//absl/strings",
    ],
)

mozc_cc_library(
    name = "file_stream",
    srcs = ["file_stream.cc"],
    hdrs = ["file_stream.h"],
    visibility = ["//:__subpackages__"],
    deps = ["@com_google_absl//absl/strings"],
)

mozc_cc_binary(
    name = "text_converter_compiler",
    srcs = ["text_converter_compiler.cc"],
    tags = ["manual"],
    deps = [
        ":double_array_def",
        ":file_stream",
        ":init_mozc_buildtool",
        ":logging",
        ":util",
        "@com_google_absl//absl/flags:flag",
        # For OSS, darts is also required.
        # http://chasen.org/~taku/software/darts/
        "@com_google_absl//absl/strings",
    ],
)

mozc_cc_library(
    name = "number_util",
    srcs = ["number_util.cc"],
    hdrs = ["number_util.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        ":japanese_util",
        ":japanese_util_rule",
        ":logging",
        ":util",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
    ],
)

mozc_cc_test(
    name = "number_util_test",
    size = "small",
    srcs = ["number_util_test.cc"],
    requires_full_emulation = False,
    deps = [
        ":number_util",
        "//testing:gunit_main",
        "@com_google_absl//absl/strings",
    ],
)

mozc_cc_library(
    name = "text_normalizer",
    srcs = ["text_normalizer.cc"],
    hdrs = ["text_normalizer.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        ":port",
        ":util",
        "@com_google_absl//absl/strings",
    ],
)

mozc_cc_test(
    name = "text_normalizer_test",
    size = "small",
    srcs = ["text_normalizer_test.cc"],
    requires_full_emulation = False,
    deps = [
        ":text_normalizer",
        ":util",
        "//testing:gunit_main",
    ],
)

mozc_cc_library(
    name = "clock_mock",
    testonly = True,
    srcs = ["clock_mock.cc"],
    hdrs = ["clock_mock.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        ":clock",
        ":port",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/time",
    ],
)

mozc_cc_test(
    name = "clock_mock_test",
    size = "small",
    srcs = ["clock_mock_test.cc"],
    requires_full_emulation = False,
    deps = [
        ":clock_mock",
        ":util",
        "//testing:gunit_main",
    ],
)

mozc_cc_library(
    name = "mmap",
    srcs = ["mmap.cc"],
    hdrs = ["mmap.h"],
    deps = [
        ":logging",
        ":port",
        ":util",
    ] + mozc_select(
        windows = ["//base/win32:scoped_handle"],
    ),
)

mozc_cc_test(
    name = "mmap_test",
    size = "small",
    srcs = ["mmap_test.cc"],
    requires_full_emulation = False,
    deps = [
        ":file_util",
        ":mmap",
        "//testing:gunit_main",
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/random",
    ],
)

mozc_cc_library(
    name = "environ",
    srcs = ["environ.cc"],
    hdrs = ["environ.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        ":singleton",
    ],
)

mozc_cc_library(
    name = "environ_mock",
    hdrs = ["environ_mock.h"],
    deps = [":environ"],
)

mozc_cc_library(
    name = "file_util",
    srcs = ["file_util.cc"],
    hdrs = ["file_util.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        ":file_stream",
        ":logging",
        ":mmap",
        ":singleton",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
    ] + mozc_select(
        windows = [
            ":util",
            "//base/win32:scoped_handle",
        ],
    ),
)

mozc_cc_library(
    name = "file_util_mock",
    hdrs = ["file_util_mock.h"],
    deps = [
        ":file_util",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings:str_format",
    ],
)

mozc_cc_test(
    name = "file_util_mock_test",
    size = "small",
    srcs = ["file_util_mock_test.cc"],
    requires_full_emulation = False,
    deps = [
        ":file_util_mock",
        "//testing:gunit_main",
    ],
)

mozc_cc_test(
    name = "file_util_test",
    size = "small",
    srcs = ["file_util_test.cc"],
    requires_full_emulation = False,
    deps = [
        ":file_util",
        ":logging",
        ":util",
        "//testing:gunit_main",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings:str_format",
    ],
)

mozc_cc_library(
    name = "system_util",
    # TODO(b/269889028): android_util and win_util have cyclic dependency
    # between this library. Solve it and make them independent libraries.
    srcs = ["system_util.cc"] + mozc_select(
        android = ["android_util.cc"],
        windows = ["//base/win32:win_util_cc"],
    ),
    hdrs = ["system_util.h"] + mozc_select(
        android = ["android_util.h"],
        windows = ["//base/win32:win_util_h"],
    ),
    local_defines = mozc_select(
        linux = [
            "MOZC_DOCUMENT_DIR=\\\"" + LINUX_MOZC_DOCUMENT_DIR + "\\\"",
            "MOZC_SERVER_DIR=\\\"" + LINUX_MOZC_SERVER_DIR + "\\\"",
        ],
    ),
    deps = [
        ":const",
        ":environ",
        ":file_util",
        ":logging",
        ":port",
        ":singleton",
        ":util",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/synchronization",
    ] + mozc_select(
        android = [
            # android_util.h includes this for FRIEND_TEST
            "//testing:gunit_prod",
        ],
        ios = ["//base/mac:mac_util"],
        macos = ["//base/mac:mac_util"],
    ),
)

mozc_cc_test(
    name = "system_util_test",
    srcs = ["system_util_test.cc"],
    requires_full_emulation = False,
    visibility = ["//visibility:private"],
    deps = [
        ":environ_mock",
        ":file_util",
        ":file_util_mock",
        ":port",
        ":system_util",
        ":util",
        "//testing:gunit_main",
        "@com_google_absl//absl/strings",
    ],
)

mozc_cc_library(
    name = "process",
    srcs = ["process.cc"],
    hdrs = ["process.h"],
    local_defines = [
        "MOZC_BROWSER_COMMAND=\\\"" + LINUX_MOZC_BROWSER_COMMAND + "\\\"",
    ],
    visibility = ["//:__subpackages__"],
    deps = [
        ":const",
        ":file_util",
        ":logging",
        ":port",
        ":system_util",
        ":util",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/time",
    ] + mozc_select(
        macos = ["//base/mac:mac_process"],
        windows = ["//base/win32:scoped_handle"],
    ),
)

mozc_cc_binary(
    name = "process_main",
    srcs = ["process_main.cc"],
    deps = [
        ":init_mozc",
        ":logging",
        ":process",
        "@com_google_absl//absl/flags:flag",
    ],
)

mozc_cc_library(
    name = "process_mutex",
    srcs = ["process_mutex.cc"],
    hdrs = ["process_mutex.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        ":file_util",
        ":logging",
        ":port",
        ":singleton",
        ":system_util",
        ":util",
        "@com_google_absl//absl/synchronization",
    ] + mozc_select(
        windows = [
            "//base/win32:scoped_handle",
            "//base/win32:win_sandbox",
        ],
    ),
)

mozc_cc_test(
    name = "process_mutex_test",
    size = "small",
    srcs = ["process_mutex_test.cc"],
    requires_full_emulation = False,
    deps = [
        "logging",
        ":file_util",
        ":process_mutex",
        ":system_util",
        "//testing:gunit_main",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/time",
    ],
)

mozc_cc_library(
    name = "run_level",
    srcs = [
        "run_level.cc",
    ],
    hdrs = ["run_level.h"],
    visibility = [
        "//:__subpackages__",
    ],
    deps = [
        ":const",
        ":logging",
        ":port",
        ":system_util",
        ":util",
    ] + mozc_select(
        windows = [
            "//base/win32:scoped_handle",
            "//base/win32:win_sandbox",
        ],
    ),
)

mozc_cc_binary(
    name = "run_level_main",
    srcs = ["run_level_main.cc"],
    deps = [
        ":init_mozc",
        ":run_level",
        "@com_google_absl//absl/flags:flag",
    ],
)

mozc_py_library(
    name = "gen_config_file_stream_data_lib",
    srcs = ["gen_config_file_stream_data.py"],
)

mozc_py_binary(
    name = "gen_config_file_stream_data",
    srcs = ["gen_config_file_stream_data.py"],
    deps = [":gen_config_file_stream_data_lib"],
)

genrule(
    name = "config_file_stream_data",
    srcs = [
        "//data/keymap:keymap_files",
        "//data/preedit:composition_table",
    ],
    outs = ["config_file_stream_data.inc"],
    cmd = "$(location :gen_config_file_stream_data) --output=$@ $(SRCS)",
    tools = [":gen_config_file_stream_data"],
    visibility = ["//visibility:private"],
)

mozc_cc_library(
    name = "config_file_stream",
    srcs = [
        "config_file_stream.cc",
        ":config_file_stream_data",
    ],
    hdrs = ["config_file_stream.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        ":file_stream",
        ":file_util",
        ":logging",
        ":port",
        ":singleton",
        ":system_util",
        "@com_google_absl//absl/strings",
    ],
)

mozc_cc_test(
    name = "config_file_stream_test",
    size = "small",
    srcs = ["config_file_stream_test.cc"],
    requires_full_emulation = False,
    deps = [
        ":config_file_stream",
        ":file_util",
        ":system_util",
        "//testing:gunit_main",
        "@com_google_absl//absl/flags:flag",
    ],
)

TARGET_PLATFORM = mozc_select(
    android = "Android",
    chromiumos = "ChromeOS",
    default = "",
    linux = "Linux",
    macos = "Mac",
    wasm = "Wasm",
    windows = "Windows",
)

genrule(
    name = "mozc_version_txt",
    srcs = [
        "//data/version:mozc_version_template.bzl",
    ],
    outs = ["mozc_version.txt"],
    cmd = (
        "$(location //build_tools:mozc_version)" +
        ' --template_path="$(location //data/version:mozc_version_template.bzl)"' +
        ' --output="$(OUTS)"' +
        " --target_platform=" + TARGET_PLATFORM
    ),
    tools = ["//build_tools:mozc_version"],
    visibility = ["//:__subpackages__"],
)

genrule(
    name = "version_def_h",
    srcs = [
        "mozc_version.txt",
        "version_def_template.h",
    ],
    outs = ["version_def.h"],
    cmd = (
        "$(location //build_tools:replace_version)" +
        " --version_file=$(location mozc_version.txt) " +
        " --input=$(location version_def_template.h) --output=$(OUTS)" +
        " --branding=Mozc"
    ),
    tools = ["//build_tools:replace_version"],
    visibility = ["//visibility:private"],
)

mozc_cc_library(
    name = "version",
    srcs = [
        "version.cc",
        ":version_def_h",
    ],
    hdrs = [
        "version.h",
        "version_def.h",
    ],
    deps = [
        ":logging",
        ":number_util",
        ":port",
        ":util",
        "@com_google_absl//absl/strings",
    ],
)

mozc_cc_test(
    name = "version_test",
    size = "small",
    srcs = ["version_test.cc"],
    requires_full_emulation = False,
    deps = [
        ":util",
        ":version",
        "//testing:gunit_main",
        "@com_google_absl//absl/strings:str_format",
    ],
)

mozc_cc_library(
    name = "obfuscator_support",
    srcs = [
        "unverified_aes256.cc",
        "unverified_sha1.cc",
    ],
    hdrs = [
        "unverified_aes256.h",
        "unverified_sha1.h",
    ],
    visibility = [
        "//data_manager:__pkg__",
        "//ipc:__pkg__",
    ],
    deps = [
        ":logging",
        ":port",
        "@com_google_absl//absl/strings",
    ],
)

mozc_cc_test(
    name = "obfuscator_support_test",
    size = "small",
    srcs = [
        "unverified_aes256_test.cc",
        "unverified_sha1_test.cc",
    ],
    requires_full_emulation = False,
    visibility = ["//visibility:private"],
    deps = [
        ":obfuscator_support",
        "//testing:gunit_main",
        "@com_google_absl//absl/strings",
    ],
)

# TODO(team): encryptor.cc and password_manager.cc are mutually dependent and
# cannot be decoupled.  Fix this issue.
mozc_cc_library(
    name = "encryptor",
    srcs = [
        "encryptor.cc",
        "password_manager.cc",
    ],
    hdrs = [
        "encryptor.h",
        "password_manager.h",
    ],
    visibility = ["//:__subpackages__"],
    deps = [
        ":const",
        ":file_stream",
        ":file_util",
        ":logging",
        ":mmap",
        ":obfuscator_support",
        ":port",
        ":random",
        ":singleton",
        ":system_util",
        ":util",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/synchronization",
        "@com_google_absl//absl/strings:str_format",
    ] + mozc_select(
        ios = ["//base/mac:mac_util"],
        macos = ["//base/mac:mac_util"],
    ),
)

mozc_cc_test(
    name = "encryptor_test",
    size = "small",
    srcs = [
        "encryptor_test.cc",
        "password_manager_test.cc",
    ],
    requires_full_emulation = False,
    visibility = ["//visibility:private"],
    deps = [
        ":encryptor",
        ":random",
        ":system_util",
        "//testing:gunit_main",
        "@com_google_absl//absl/flags:flag",
    ],
)

mozc_cc_binary(
    name = "encryptor_main",
    srcs = ["encryptor_main.cc"],
    visibility = ["//visibility:private"],
    deps = [
        ":encryptor",
        ":file_util",
        ":init_mozc",
        ":logging",
        ":status",
        ":util",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/strings",
    ],
)

mozc_cc_binary(
    name = "password_manager_main",
    srcs = ["password_manager_main.cc"],
    visibility = ["//visibility:private"],
    deps = [
        ":encryptor",
        ":init_mozc",
        ":logging",
        ":util",
        "@com_google_absl//absl/flags:flag",
    ],
)

mozc_cc_library(
    name = "cpu_stats",
    srcs = ["cpu_stats.cc"],
    hdrs = ["cpu_stats.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        ":logging",
        ":port",
    ],
)

mozc_cc_test(
    name = "cpu_stats_test",
    size = "small",
    srcs = ["cpu_stats_test.cc"],
    requires_full_emulation = False,
    deps = [
        ":cpu_stats",
        "//testing:gunit_main",
    ],
)

mozc_cc_binary(
    name = "cpu_stats_main",
    srcs = ["cpu_stats_main.cc"],
    deps = [
        ":cpu_stats",
        ":init_mozc",
        ":port",
        ":thread",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/time",
    ],
)

mozc_cc_library(
    name = "stopwatch",
    srcs = ["stopwatch.cc"],
    hdrs = ["stopwatch.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        ":clock",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/time",
    ],
)

mozc_cc_test(
    name = "stopwatch_test",
    size = "small",
    srcs = ["stopwatch_test.cc"],
    requires_full_emulation = False,
    deps = [
        ":clock",
        ":clock_mock",
        ":stopwatch",
        "//testing:gunit_main",
        "@com_google_absl//absl/time",
    ],
)

mozc_cc_binary(
    name = "stopwatch_main",
    srcs = ["stopwatch_main.cc"],
    deps = [
        ":init_mozc",
        ":stopwatch",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/time",
    ],
)

mozc_cc_library(
    name = "url",
    srcs = ["url.cc"],
    hdrs = ["url.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
    ],
)

mozc_cc_test(
    name = "url_test",
    size = "small",
    srcs = ["url_test.cc"],
    requires_full_emulation = False,
    deps = [
        ":url",
        "//testing:gunit_main",
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/strings",
    ],
)

mozc_cc_library(
    name = "multifile",
    srcs = ["multifile.cc"],
    hdrs = ["multifile.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        ":file_stream",
        ":logging",
        "@com_google_absl//absl/strings",
    ],
)

mozc_cc_test(
    name = "multifile_test",
    size = "small",
    srcs = ["multifile_test.cc"],
    requires_full_emulation = False,
    deps = [
        ":file_stream",
        ":file_util",
        ":multifile",
        ":util",
        "//testing:gunit_main",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
    ],
)

mozc_cc_library(
    name = "coordinates",
    hdrs = ["coordinates.h"],
)

mozc_cc_library(
    name = "crash_report_handler",
    srcs = ["crash_report_handler.cc"],
    hdrs = ["crash_report_handler.h"],
    deps = [
        ":const",
        ":file_util",
        ":logging",
        ":system_util",
        ":util",
        ":version",
    ],
)

mozc_cc_library(
    name = "embedded_file",
    hdrs = ["embedded_file.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        ":port",
        "@com_google_absl//absl/strings",
    ],
)

genrule(
    name = "gen_embedded_file_test_data",
    srcs = ["embedded_file.h"],
    outs = ["embedded_file_test_data.inc"],
    cmd = "$(location //build_tools:embed_file) --input=$< --name=kEmbeddedFileTestData --output=$@",
    tools = ["//build_tools:embed_file"],
)

mozc_cc_test(
    name = "embedded_file_test",
    srcs = [
        "embedded_file_test.cc",
        ":gen_embedded_file_test_data",
    ],
    data = ["embedded_file.h"],
    requires_full_emulation = False,
    deps = [
        ":embedded_file",
        ":file_util",
        ":port",
        "//testing:gunit_main",
        "//testing:mozctest",
    ],
)

mozc_cc_library(
    name = "status",
    hdrs = ["status.h"],
    deps = [
        ":logging",
    ],
)

mozc_cc_library(
    name = "thread2",
    srcs = ["thread2.cc"],
    hdrs = ["thread2.h"],
    deps = [
        ":thread",
        "@com_google_absl//absl/functional:bind_front",
        "@com_google_absl//absl/synchronization",
    ],
)

mozc_cc_test(
    name = "thread2_test",
    srcs = ["thread2_test.cc"],
    deps = [
        ":thread2",
        "//testing:gunit_main",
        "@com_google_absl//absl/synchronization",
        "@com_google_absl//absl/time",
    ],
)

mozc_cc_library(
    name = "random",
    srcs = ["random.cc"],
    hdrs = ["random.h"],
    deps = [
        ":util",
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/random",
    ],
)

mozc_cc_test(
    name = "random_test",
    size = "small",
    srcs = ["random_test.cc"],
    deps = [
        ":random",
        ":util",
        "//testing:gunit_main",
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/random",
    ],
)
